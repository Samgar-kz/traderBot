import pandas as pd
import ta
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
import logging

logging.basicConfig(filename="ai_training_log.txt", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def prepare_data(historical_data):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI"""
    df = pd.DataFrame(historical_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['SMA_50'] = ta.trend.sma_indicator(df['close'], window=50)
    df['SMA_200'] = ta.trend.sma_indicator(df['close'], window=200)
    df['RSI'] = ta.momentum.rsi(df['close'], window=14)
    df['MACD'] = ta.trend.macd(df['close'])
    
    df = df.dropna()
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    logging.info(f"üîç –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º: {df.shape}")

    df['Target'] = (df['close'].shift(-1) > df['close']).astype(int)
    df = df.iloc[:-1]  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã X –∏ y —Å–æ–≤–ø–∞–¥–∞–ª–∏
    
    scaler = MinMaxScaler()
    X = scaler.fit_transform(df[['SMA_50', 'SMA_200', 'RSI', 'MACD', 'close']])
    y = df['Target'].values  

    # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    logging.info(f"üìä –ü—Ä–∏–º–µ—Ä X (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫): {X[:5]}")
    logging.info(f"üéØ –ü—Ä–∏–º–µ—Ä y (–ø–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π): {y[:5]}")

    return X, y, scaler

def train_ai_model(historical_data):
    """–û–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–∏"""
    X, y, scaler = prepare_data(historical_data)
    
    if len(X) == 0 or len(y) == 0:
        raise ValueError("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI.")
    
    model = LogisticRegression()
    
    logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ AI...")
    model.fit(X, y)  # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    accuracy = model.score(X, y)
    logging.info(f"‚úÖ AI –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.4f}")

    return model, scaler