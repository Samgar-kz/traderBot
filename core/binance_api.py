# binance_api.py - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Binance API
import ccxt
import logging
from config import API_KEY, API_SECRET
from bot.telegram_bot import send_telegram_message

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Binance API
exchange = ccxt.binance({
    'apiKey': API_KEY,
    'secret': API_SECRET,
    'enableRateLimit': True
})

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

def get_balance(asset='USDT'):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
    try:
        balance = exchange.fetch_balance()
        return round(balance.get(asset, {}).get('free', 0), 2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Binance: {e}")
        return 0

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã

def get_price(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞."""
    try:
        ticker = exchange.fetch_ticker(symbol)
        return ticker['last']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        return None

# ‚úÖ –†–∞—Å—á–µ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏

def get_trade_amount(symbol, balance_percent=5):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞)."""
    balance = get_balance()
    if balance == 0:
        return 0

    price = get_price(symbol)
    if price is None:
        return 0

    trade_value = (balance * balance_percent) / 100
    return round(trade_value / price, 6)

# ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤

def place_order(symbol, order_type, amount):
    """–†–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä (–ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞)"""
    if amount <= 0:
        return None

    try:
        if order_type == "buy":
            order = exchange.create_market_buy_order(symbol, amount)
        elif order_type == "sell":
            order = exchange.create_market_sell_order(symbol, amount)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞")

        price = order['price']
        send_telegram_message(f"‚úÖ {order_type.upper()} {symbol} –ø–æ —Ü–µ–Ω–µ: {price}")
        return price

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {order_type} {symbol}: {e}")
        send_telegram_message(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ {order_type} {symbol}: {e}")
        return None

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä

def get_top_liquid_pairs(limit=5):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä —Å USDT"""
    try:
        tickers = exchange.fetch_tickers()
        volumes = {symbol: tickers[symbol]['quoteVolume'] for symbol in tickers if '/USDT' in symbol}
        sorted_pairs = sorted(volumes.items(), key=lambda x: x[1], reverse=True)
        return [pair[0] for pair in sorted_pairs[:limit]]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä: {e}")
        send_telegram_message(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä: {e}")
        return []

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

def get_historical_data(symbol, timeframe='1m', limit=100):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OHLCV"""
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        
        if not ohlcv or len(ohlcv) < 2:
            logging.error(f"‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(ohlcv)} –∑–∞–ø–∏—Å–µ–π.")
            return []
        
        # üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        print(f"\nüîç {symbol} - –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ohlcv)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìå –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:\n{ohlcv[:5]}")
        print(f"üìå –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:\n{ohlcv[-5:]}")

        return ohlcv  # ‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ OHLCV
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ {symbol}: {e}")
        return []