import numpy as np
import logging
from config import CONFIG

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö)
logging.basicConfig(filename="trade_log.txt", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def calculate_dynamic_risk(historical_data):
    """ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. """

    if len(historical_data) < 50:
        logging.warning(f"‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        return CONFIG["STOP_LOSS_PERCENT"], CONFIG["SELL_RISE_PERCENT"], CONFIG["TRAILING_STOP_PERCENT"]

    try:
        closes = np.array([data[4] for data in historical_data[-50:]])  
        volatility = np.std(closes)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è

        # ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        risk_factor = 1 + (volatility / np.mean(closes))  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
        
        stop_loss = max(1, CONFIG["STOP_LOSS_PERCENT"] * risk_factor)
        take_profit = max(1, CONFIG["SELL_RISE_PERCENT"] * risk_factor)
        trailing_stop = max(1, CONFIG["TRAILING_STOP_PERCENT"] * risk_factor)

        logging.info(f"üìä –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ ({volatility:.5f}): SL={stop_loss:.2f}%, TP={take_profit:.2f}%, TS={trailing_stop:.2f}%")

        return round(stop_loss, 2), round(take_profit, 2), round(trailing_stop, 2)

    except ZeroDivisionError:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞.")
        return CONFIG["STOP_LOSS_PERCENT"], CONFIG["SELL_RISE_PERCENT"], CONFIG["TRAILING_STOP_PERCENT"]

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ calculate_dynamic_risk: {e}")
        return CONFIG["STOP_LOSS_PERCENT"], CONFIG["SELL_RISE_PERCENT"], CONFIG["TRAILING_STOP_PERCENT"]