import asyncio
import time
import traceback
import logging
from core.binance_api import get_price, get_trade_amount, place_order, get_top_liquid_pairs, get_balance, get_historical_data
from ai.ai_training import train_ai_model
from ai.ai_prediction import predict_next_move_ai
from core.risk_management import calculate_dynamic_risk
from bot.telegram_bot import send_telegram_message, send_price_chart
from config import CONFIG

logging.basicConfig(filename="trade_log.txt", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
is_running = asyncio.Event()
loss_streak = 0  
initial_balance = None  
previous_balance = None  
last_trade_time = None  
last_report_time = None  
cycle_count = 0  
ai_models = {}  
scalers = {}  
historical_data = {}  
PAIRS = []

async def trade_logic():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞"""
    global loss_streak, initial_balance, previous_balance, last_trade_time, last_report_time
    global cycle_count, ai_models, scalers, historical_data, PAIRS  

    if is_running.is_set():
        send_telegram_message("‚ö† –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return

    try:
        send_telegram_message("üöÄ AI Trading Bot –∑–∞–ø—É—â–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        is_running.set()

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        initial_balance = get_balance()
        if initial_balance < 10:
            send_telegram_message(f"‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–ë–∞–ª–∞–Ω—Å: {initial_balance:.2f} USDT). –ú–∏–Ω–∏–º—É–º $10.")
            is_running.clear()
            return  

        previous_balance = initial_balance
        send_telegram_message(f"üí∞ –ë–∞–ª–∞–Ω—Å: {initial_balance:.2f} USDT. –ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!")

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-–ª–∏–∫–≤–∏–¥–Ω—ã–µ –ø–∞—Ä—ã
        PAIRS = get_top_liquid_pairs(10)
        if not PAIRS:
            send_telegram_message("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
            is_running.clear()
            return  

        # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—É—á–∞–µ–º AI
        for pair in PAIRS:
            historical_data[pair] = get_historical_data(pair, '1m', 1000)
            if len(historical_data[pair]) >= 50:
                send_telegram_message(f"üß† AI –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ 1000 —Å–≤–µ—á–µ–π {pair}...")
                ai_models[pair], scalers[pair] = train_ai_model(historical_data[pair])
            else:
                send_telegram_message(f"‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI {pair}.")

        send_telegram_message("‚úÖ AI –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥.")
        last_trade_time = time.time()
        last_report_time = time.time()

        while is_running.is_set():
            cycle_count += 1  
            trade_executed = False  

            # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
            if (time.time() - last_report_time) >= 1800:
                await send_market_report()
                last_report_time = time.time()

            for pair in PAIRS:
                try:
                    current_price = get_price(pair)
                    if current_price is None:
                        continue

                    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∞–π–º—Å—Ç–µ–º–ø, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    last_timestamp = historical_data[pair][-1][0] + 60_000 if historical_data[pair] else int(time.time() * 1000)
                    historical_data[pair].append([last_timestamp, 0, 0, 0, current_price, 0])

                    if len(historical_data[pair]) > 1000:
                        historical_data[pair].pop(0)

                    # ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤)
                    stop_loss, take_profit, trailing_stop = calculate_dynamic_risk(historical_data[pair])

                    # ‚úÖ AI –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫—É
                    if ai_models.get(pair) is not None and scalers.get(pair) is not None:
                        decision = predict_next_move_ai(ai_models[pair], historical_data[pair][-1:], scalers[pair])
                    else:
                        decision = "hold"

                    # ‚úÖ AI —Å–æ–æ–±—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å
                    if decision == "buy":
                        send_telegram_message(f"üìâ {pair} –ø–∞–¥–∞–µ—Ç! AI –∂–¥–µ—Ç –ª—É—á—à—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏...")
                    elif decision == "sell":
                        send_telegram_message(f"üìà {pair} —Ä–∞—Å—Ç–µ—Ç! AI –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –ø—Ä–æ–¥–∞–∂–µ...")

                    # ‚úÖ AI –ø–æ–∫—É–ø–∞–µ—Ç
                    if decision == "buy":
                        amount = get_trade_amount(pair)
                        if amount > 0:
                            send_telegram_message(f"ü§ñ AI: –ü–æ–∫—É–ø–∞–µ–º {pair}, SL: {stop_loss}%, TP: {take_profit}%, TS: {trailing_stop}%")
                            place_order(pair, "buy", amount)
                            await update_balance()
                            last_trade_time = time.time()
                            trade_executed = True

                    # ‚úÖ AI –ø—Ä–æ–¥–∞–µ—Ç
                    elif decision == "sell":
                        amount = get_trade_amount(pair)
                        if amount > 0:
                            send_telegram_message(f"ü§ñ AI: –ü—Ä–æ–¥–∞–µ–º {pair}")
                            place_order(pair, "sell", amount)
                            await update_balance()
                            last_trade_time = time.time()
                            trade_executed = True

                except Exception as trade_error:
                    error_trace = traceback.format_exc()
                    send_telegram_message(f"‚ö† –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ {pair}: {trade_error}\n{error_trace}")
                    logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ {pair}: {trade_error}\n{error_trace}")

            await asyncio.sleep(60)
            await check_safety_mode()

    except Exception as e:
        error_trace = traceback.format_exc()
        send_telegram_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n{error_trace}")
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n{error_trace}")
        is_running.clear()

async def send_market_report():
    send_telegram_message("üìä 30-–º–∏–Ω—É—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä—ã–Ω–∫–µ...")

    if not historical_data or all(len(data) == 0 for data in historical_data.values()):
        send_telegram_message("‚ö† –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞! –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return  

    formatted_data = format_historical_data(historical_data)
    await send_price_chart(formatted_data)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ

def format_historical_data(historical_data):
    formatted_data = {}

    for pair, data in historical_data.items():

        if not isinstance(data, list) or len(data) < 2:
            print(f"‚ö† –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö {pair} (–æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ OHLCV)")
            continue

        try:
            timestamps = [int(candle[0]) for candle in data]  # –ë–µ—Ä—ë–º timestamp
            prices = [float(candle[4]) for candle in data]  # –ë–µ—Ä—ë–º close price

            formatted_data[pair] = {"timestamps": timestamps, "prices": prices}
        
        except (IndexError, ValueError) as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö {pair}: {e}")
            continue

    if not formatted_data:
        print("‚ùå –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã! –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")

    return formatted_data

async def update_balance():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏."""
    global previous_balance
    current_balance = get_balance()
    if current_balance != previous_balance:
        send_telegram_message(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} USDT –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏.")
        previous_balance = current_balance  

async def check_safety_mode():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –ø–æ—Ç–µ—Ä—è—Ö."""
    global loss_streak, initial_balance
    try:
        current_balance = get_balance()
        if current_balance < initial_balance * (1 - CONFIG["SAFETY_STOP_LOSS"] / 100):
            send_telegram_message("‚ö† –ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù! –ü–æ—Ç–µ—Ä—è–Ω–æ –±–æ–ª–µ–µ 20% –¥–µ–ø–æ–∑–∏—Ç–∞.")
            is_running.clear()
    except Exception as e:
        send_telegram_message(f"‚ö† –û—à–∏–±–∫–∞ –≤ check_safety_mode: {e}")

async def stop_trading():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é."""
    if not is_running.is_set():
        send_telegram_message("‚ö† –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    send_telegram_message("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞... –ó–∞–≤–µ—Ä—à–∞—é —Å–¥–µ–ª–∫–∏.")
    is_running.clear()
    await asyncio.sleep(3)
    send_telegram_message("üõë –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")