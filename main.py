import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from config import TELEGRAM_TOKEN
from core.trading_logic import trade_logic, stop_trading, is_running

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–∏—à–µ–º –æ—à–∏–±–∫–∏ –≤ `bot_log.txt`)
logging.basicConfig(filename="bot_log.txt", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

async def start(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if is_running.is_set():
        await update.message.reply_text("‚ö† –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return

    is_running.set()  # ‚úÖ –§–∏–∫—Å –±–∞–≥–∞: –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç –ø–æ—Å–ª–µ stop
    asyncio.create_task(trade_logic())
    await update.message.reply_text("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä—ã–Ω–æ–∫!")

async def stop(update: Update, context: CallbackContext):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    if not is_running.is_set():
        await update.message.reply_text("‚ö† –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    is_running.clear()
    await update.message.reply_text("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! (–ó–∞–≤–µ—Ä—à–∞—é —Å–¥–µ–ª–∫–∏...)")
    await stop_trading()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        application.add_handler(CommandHandler('start', start))
        application.add_handler(CommandHandler('stop', stop))
        logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")

if __name__ == '__main__':
    main()