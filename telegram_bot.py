import requests
import matplotlib.pyplot as plt
import io
from io import BytesIO
from config import TELEGRAM_TOKEN, TELEGRAM_CHAT_ID

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        requests.post(url, data=data, timeout=5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) –≤ Telegram
def send_telegram_photo(image_buffer: BytesIO, caption="üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã"):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
    data = {"chat_id": TELEGRAM_CHAT_ID, "caption": caption}
    files = {"photo": ("chart.png", image_buffer.getvalue(), "image/png")}
    
    try:
        response = requests.post(url, data=data, files=files, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ HTTP
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram: {e}")

def send_price_chart(historical_data):
    plt.figure(figsize=(10, 5))

    for pair, data in historical_data.items():
        prices = [entry[4] for entry in data]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è

        if len(prices) > 1:
            initial_price = prices[0]  
            try:
                normalized_prices = [(float(p) / float(initial_price) - 1) * 100 for p in prices]
            except ValueError:
                send_telegram_message("‚ö† –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å API –¥–∞–Ω–Ω—ã–µ.")
                return


            plt.plot(normalized_prices, label=pair)

    plt.legend()
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)")  # –û–±–Ω–æ–≤–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –æ—Å–∏ Y
    plt.title("üìä 30-–º–∏–Ω—É—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä—ã–Ω–∫–µ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã)")
    plt.yscale("symlog")  # ‚úÖ –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞

    img_buf = BytesIO()
    plt.savefig(img_buf, format="png")
    img_buf.seek(0)

    send_telegram_photo(img_buf, caption="üìä 30-–º–∏–Ω—É—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä—ã–Ω–∫–µ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã)")
    plt.close()
    """–°—Ç—Ä–æ–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä."""
    if not historical_data:
        send_telegram_message("‚ö† –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞!")
        return

    plt.figure(figsize=(10, 5))

    for pair, data in historical_data.items():
        timestamps = data["timestamps"]
        prices = data["prices"]
        if timestamps and prices:
            plt.plot(timestamps, prices, label=pair)

    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–¶–µ–Ω–∞")
    plt.legend()
    plt.title("üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω (30-–º–∏–Ω—É—Ç–Ω—ã–π –æ—Ç—á–µ—Ç)")

     # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
    img_buf = BytesIO()
    plt.savefig(img_buf, format="png")
    img_buf.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ Telegram
    send_telegram_photo(img_buf, caption="üìä 30-–º–∏–Ω—É—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä—ã–Ω–∫–µ")

    plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å