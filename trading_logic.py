import asyncio
import time
import traceback
import logging
from binance_api import get_price, get_trade_amount, place_order, get_top_liquid_pairs, get_balance
from ai_trading import train_ai_model, predict_next_move_ai
from risk_management import calculate_dynamic_risk
from telegram_bot import send_telegram_message, send_price_chart
from config import CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(filename="trade_log.txt", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
is_running = asyncio.Event()
loss_streak = 0  
initial_balance = None  
cycle_count = 0  
historical_prices = {}
active_trades = {}

async def trade_logic():
    global loss_streak, initial_balance, cycle_count, historical_prices  

    try:
        send_telegram_message("üöÄ AI Trading Bot –∑–∞–ø—É—â–µ–Ω!")
        logging.info("AI Bot –∑–∞–ø—É—â–µ–Ω!")

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–∫–≤–∏–¥–Ω—ã–µ –ø–∞—Ä—ã
        PAIRS = get_top_liquid_pairs(CONFIG["TOP_LIQUID_PAIRS"])  
        if not PAIRS:
            send_telegram_message("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω—ã–µ –ø–∞—Ä—ã!")
            return  

        last_prices = {pair: get_price(pair) for pair in PAIRS}
        historical_data = {pair: [] for pair in PAIRS}
        ai_models = {pair: None for pair in PAIRS}
        scalers = {pair: None for pair in PAIRS}
        historical_prices = {pair: [] for pair in PAIRS}  

        initial_balance = get_balance()
        if initial_balance is None or initial_balance == 0:
            send_telegram_message("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å!")
            return  

        is_running.set()

        while is_running.is_set():
            cycle_count += 1  

            for pair in PAIRS:
                try:
                    current_price = get_price(pair)
                    if current_price is None:
                        send_telegram_message(f"‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {pair}.")
                        continue

                    historical_prices[pair].append(current_price)
                    if len(historical_prices[pair]) > 100:
                        historical_prices[pair].pop(0)

                    historical_data[pair].append([time.time(), 0, 0, 0, current_price, 0])
                    if len(historical_data[pair]) > 500:
                        historical_data[pair].pop(0)

                    stop_loss, take_profit, trailing_stop = calculate_dynamic_risk(historical_data[pair])

                    # –û–±—É—á–∞–µ–º AI –∫–∞–∂–¥—ã–µ 100 —Ü–∏–∫–ª–æ–≤
                    if cycle_count % 100 == 0:
                        ai_models[pair], scalers[pair] = train_ai_model(historical_data[pair])

                    # AI –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫—É
                    decision = "hold"
                    if ai_models[pair]:
                        decision = predict_next_move_ai(ai_models[pair], historical_data[pair][-1:], scalers[pair])

                    # –ü–æ–∫—É–ø–∫–∞
                    if decision == "buy":
                        amount = get_trade_amount(pair)
                        if amount > 0:
                            send_telegram_message(f"ü§ñ AI: –ü–æ–∫—É–ø–∞–µ–º {pair}, SL: {stop_loss}%, TP: {take_profit}%, TS: {trailing_stop}%")
                            logging.info(f"BUY: {pair}, Price: {current_price}")
                            entry_price = place_order(pair, "buy", amount)
                            if entry_price:
                                active_trades[pair] = {
                                    "entry": entry_price,
                                    "stop_loss": entry_price * (1 - stop_loss / 100),
                                    "take_profit": entry_price * (1 + take_profit / 100),
                                    "trailing_stop": trailing_stop
                                }
                                loss_streak = 0  

                    # –ü—Ä–æ–¥–∞–∂–∞
                    elif decision == "sell":
                        amount = get_trade_amount(pair)
                        if amount > 0:
                            send_telegram_message(f"ü§ñ AI: –ü—Ä–æ–¥–∞–µ–º {pair}, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è")
                            logging.info(f"SELL: {pair}, Price: {current_price}")
                            result_price = place_order(pair, "sell", amount)
                            if result_price and result_price < last_prices[pair]:  
                                loss_streak += 1  

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
                    if pair in active_trades and "entry" in active_trades[pair]:
                        entry_price = active_trades[pair]["entry"]
                        if current_price > active_trades[pair]["take_profit"]:
                            send_telegram_message(f"üöÄ {pair} –¥–æ—Å—Ç–∏–≥ Take Profit! –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å!")
                            place_order(pair, "sell", amount)
                            del active_trades[pair]
                        elif current_price < active_trades[pair]["stop_loss"]:
                            send_telegram_message(f"‚õî {pair} —É–ø–∞–ª –Ω–∏–∂–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞! –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É!")
                            place_order(pair, "sell", amount)
                            del active_trades[pair]

                    last_prices[pair] = current_price  

                except Exception as trade_error:
                    error_trace = traceback.format_exc()
                    send_telegram_message(f"‚ö† –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ {pair}: {trade_error}\n{error_trace}")
                    logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ {pair}: {trade_error}\n{error_trace}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ Telegram –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            if cycle_count % 10 == 0:
                await send_price_chart(historical_prices)

            await asyncio.sleep(60)  
            await check_safety_mode()  

    except Exception as e:
        error_trace = traceback.format_exc()
        send_telegram_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n{error_trace}")
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n{error_trace}")
        is_running.clear()

async def check_safety_mode():
    global loss_streak, initial_balance

    try:
        current_balance = get_balance()
        if current_balance is None or current_balance == 0:
            send_telegram_message("‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞.")
            logging.warning("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            is_running.clear()
            return

        if current_balance < initial_balance * (1 - CONFIG["SAFETY_STOP_LOSS"] / 100):
            send_telegram_message("‚ö† –ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù! –ü–æ—Ç–µ—Ä—è–Ω–æ –±–æ–ª–µ–µ 20% –¥–µ–ø–æ–∑–∏—Ç–∞.")
            logging.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —É–±—ã—Ç–æ–∫ –±–æ–ª–µ–µ 20% –¥–µ–ø–æ–∑–∏—Ç–∞.")
            is_running.clear()  

        if loss_streak >= CONFIG["LOSS_STREAK_LIMIT"]:
            send_telegram_message("‚ö† –ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù! 3 —É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥.")
            logging.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 3 —É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥.")
            is_running.clear()  
            
    except Exception as safety_error:
        error_trace = traceback.format_exc()
        send_telegram_message(f"‚ö† –û—à–∏–±–∫–∞ –≤ check_safety_mode: {safety_error}\n{error_trace}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_safety_mode: {safety_error}\n{error_trace}")

async def stop_trading():
    """ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–¥–µ–ª–∫–∏ """
    is_running.clear()
    send_telegram_message("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")